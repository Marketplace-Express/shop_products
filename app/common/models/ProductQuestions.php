<?php

namespace app\common\models;


use app\common\validators\rules\QuestionRules;
use app\common\validators\UuidValidator;
use Phalcon\Validation;

/**
 * ProductQuestions
 * 
 * @package app\common\models
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-01-13, 09:24:22
 */
class ProductQuestions extends BaseModel
{
    const WHITE_LIST = [
        'userId',
        'productId',
        'text'
    ];

    /**
     * @var string
     * @Primary
     * @Column(column='id', type='string', length=36)
     */
    public $id;

    /**
     * @var string
     * @Column(column='product_id', type='string', length=36)
     */
    public $productId;

    /**
     *
     * @var string
     * @Column(column='user_id', type='string', length=36)
     */
    public $userId;

    /**
     *
     * @var string
     * @Column(column='text', type='text')
     */
    public $text;

    /**
     *
     * @var string
     * @Column(column='created_at', type='datetime')
     */
    public $createdAt;

    /**
     * @var string
     * @Column(column='updated_at', type='datetime', nullable=true)
     */
    public $updatedAt;

    /**
     *
     * @var string
     * @Column(column='deleted_at', type='datetime', nullable=true)
     */
    public $deletedAt;

    /**
     * @var integer
     * @Column(column='is_deleted', type='boolean', default=0)
     */
    public $isDeleted;

    /**
     * @var QuestionRules
     */
    private $validationRules;

    /**
     * Initialize method for model.
     * @throws \Exception
     */
    public function initialize()
    {
        $this->defaultBehavior();

        $this->setSchema('shop_products');
        $this->setSource('product_questions');
        $this->useDynamicUpdate(true);
        $this->belongsTo(
            'productId',
            Product::class,
            'productId',
            [
                'reusable' => true
            ]
        );
        $this->skipAttributesOnUpdate(['id', 'vendorId', 'userId']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'product_questions';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return ProductQuestions[]|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        $operator = '';
        if (!array_key_exists('conditions', $parameters)) {
            $parameters['conditions'] = '';
        }
        if (!empty($parameters['conditions'])) {
            $operator = ' AND ';
        }
        $parameters['conditions'] .= $operator.'isDeleted = false';
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return ProductQuestions|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        $query = self::find($parameters);
        return $query->getFirst();
    }

    public function beforeValidationOnCreate()
    {
        $this->id = $this->getDI()->getSecurity()->getRandom()->uuid();
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'id' => 'id',
            'product_id' => 'productId',
            'user_id' => 'userId',
            'text' => 'text',
            'created_at' => 'createdAt',
            'deleted_at' => 'deletedAt',
            'is_deleted' => 'isDeleted'
        ];
    }

    public function toApiArray(): array
    {
        return [
            'id' => $this->id,
            'productId' => $this->productId,
            'userId' => $this->userId,
            'text' => $this->text,
            'askedAt' => $this->createdAt,
            'editedAt' => $this->updatedAt
        ];
    }

    /**
     * @return QuestionRules
     */
    private function getValidationConfig(): QuestionRules
    {
        return $this->validationRules ?? $this->validationRules = new QuestionRules();
    }

    public function validation()
    {
        $validator = new Validation();

        $validator->add(
            ['userId', 'productId'],
            new UuidValidator()
        );

        $validator->add(
            'text',
            new Validation\Validator\StringLength([
                'min' => $this->getValidationConfig()->minTextLength,
                'max' => $this->getValidationConfig()->maxTextLength
            ])
        );

        $this->_errorMessages = $validator->validate([
            'userId' => $this->userId,
            'productId' => $this->productId,
            'text' => $this->text
        ]);

        return !$this->_errorMessages->count();
    }

}
