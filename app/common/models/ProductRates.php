<?php

namespace app\common\models;


use app\common\models\resultset\RateImageResultSet;
use app\common\validators\UuidValidator;
use Phalcon\Validation;

/**
 * ProductRate
 * 
 * @package app\common\models
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-01-11, 16:39:07
 * @property RateImageResultSet $images
 */
class ProductRates extends BaseModel
{

    /**
     * @var string
     * @Primary
     * @Column(column='rate_id', type='string', length=36)
     */
    public $rateId;

    /**
     * @var string
     * @Column(column='user_id', type='string', length=36)
     */
    public $userId;

    /**
     * @var string
     * @Column(column='product_id', type='string', length=36)
     */
    public $productId;

    /**
     * @var string
     * @Column(column='rate_text', type='text', nullable=true)
     */
    public $rateText;

    /**
     * @var string
     * @Column(column='rate_stars', type='integer', length=11)
     */
    public $rateStars;

    /**
     * @var string
     * @Column(column='created_at', type='datetime')
     */
    public $createdAt;

    /**
     * @var string
     * @Column(column='updated_at', type='datetime', nullable=true)
     */
    public $updatedAt;

    /**
     * @var string
     * @Column(column='deleted_at', type='datetime', nullable=true)
     */
    public $deletedAt;

    /**
     * @var bool
     * @Column(column='is_deleted', type='boolean', default=0)
     */
    public $isDeleted = false;

    /**
     * @var string
     * @Column(column='deletion_token', type='varchar', length=36, nullable=false, default='N/A')
     */
    public $deletionToken = 'N/A';

    /**
     * Initialize method for model.
     * @throws \Exception
     */
    public function initialize()
    {
        $this->defaultBehavior();

        $this->setSchema('shop_products');
        $this->setSource('product_rates');

        $this->belongsTo(
            'productId',
            Product::class,
            'productId',
            [
                'reusable' => true
            ]
        );

        $this->hasMany(
            'rateId',
            RateImage::class,
            'rateId',
            [
                'reusable' => true,
                'alias' => 'images',
                'conditions' => 'isDeleted = false'
            ]
        );
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'product_rates';
    }

    public function beforeValidationOnCreate()
    {
        $this->rateId = $this->di->getSecurity()->getRandom()->uuid();
    }

    public function beforeCreate()
    {
        $this->rateId = $this->getDI()->getSecurity()->getRandom()->uuid();
    }

    public function beforeDelete()
    {
        $this->operationMode = $this->_operationMade;
        $this->deletionToken = $this->di->getSecurity()->getRandom()->uuid();
    }

    public function afterSave()
    {
        if ($this->operationMode == self::OP_DELETE) {
            $this->afterDelete(); return;
        }
    }

    public function afterDelete()
    {
        $this->images->filter(function ($image) {
            $image->delete();
        });
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return ProductRates[]|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        $operator = '';
        if (!array_key_exists('conditions', $parameters)) {
            $parameters['conditions'] = '';
        }
        if (!empty($parameters['conditions'])) {
            $operator = ' AND ';
        }
        $parameters['conditions'] .= $operator.'isDeleted = false';
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return ProductRates|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        $query = self::find($parameters);
        return $query->getFirst();
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'rate_id' => 'rateId',
            'user_id' => 'userId',
            'product_id' => 'productId',
            'rate_text' => 'rateText',
            'rate_stars' => 'rateStars',
            'created_at' => 'createdAt',
            'updated_at' => 'updatedAt',
            'deleted_at' => 'deletedAt',
            'is_deleted' => 'isDeleted',
            'deletion_token' => 'deletionToken'
        ];
    }

    /**
     * @return array
     */
    public function toApiArray(): array
    {
        return [
            'rateId' => $this->rateId,
            'userId' => $this->userId,
            'productId' => $this->productId,
            'text' => $this->rateText,
            'stars' => $this->rateStars,
            'images' => $this->images->toApiArray()
        ];
    }

    /**
     * @return bool
     */
    public function validation(): bool
    {
        $validator = new Validation();
        $validator->bind($this, $this->toArray());

        $validator->add(
            ['userId', 'productId'],
            new UuidValidator()
        );

        $validator->add(
            'rateText',
            new Validation\Validator\StringLength([
                'min' => 10,
                'allowEmpty' => true
            ])
        );

        $validator->add(
            'rateStars',
            new Validation\Validator\NumericValidator([
                'min' => 1,
                'max' => 5
            ])
        );

        $validator->add(
            ['userId', 'productId', 'isDeleted', 'deletionToken'],
            new Validation\Validator\Uniqueness([
                'model' => $this,
                'message' => 'You already rated this product'
            ])
        );

        $this->_errorMessages = $validator->validate([
            'userId' => $this->userId,
            'productId' => $this->productId,
            'rateText' => $this->rateText,
            'rateStars' => $this->rateStars
        ]);

        return !count($this->_errorMessages);
    }
}
