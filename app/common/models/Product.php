<?php

namespace Shop_products\Models;

use Phalcon\Validation;
use Shop_products\Enums\ProductTypesEnums;
use Shop_products\Validators\UuidValidator;

/**
 * Product
 * 
 * @package Shop_products\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-01-11, 16:38:52
 */
class Product extends Base
{
    const WHITE_LIST = [
        'productId',
        'productCategoryId',
        'productUserId',
        'productVendorId',
        'productTitle',
        'productLinkSlug',
        'productType',
        'productCustomPageId',
        'productPrice',
        'productSalePrice',
        'productSaleEndTime',
        'createdAt',
        'updatedAt',
        'deletedAt',
        'isPublished',
        'isDeleted'
    ];

    /**
     *
     * @var string
     */
    public $productId;

    /**
     *
     * @var string
     */
    public $productCategoryId;

    /**
     *
     * @var string
     */
    public $productUserId;

    /**
     *
     * @var string
     */
    public $productVendorId;

    /**
     *
     * @var string
     */
    public $productTitle;

    /**
     *
     * @var string
     */
    public $productLinkSlug;

    /**
     *
     * @var string
     */
    public $productCustomPageId;

    /**
     * @var float
     */
    public $productPrice;

    /**
     * @var float
     */
    public $productSalePrice;

    /**
     * @var string
     */
    public $productSaleEndTime;

    /**
     *
     * @var string
     */
    public $createdAt;

    /**
     *
     * @var string
     */
    public $updatedAt;

    /**
     *
     * @var string
     */
    public $deletedAt;

    /**
     * @var bool
     */
    public $isPublished;

    /**
     * @var array
     */
    private $keywords;

    /**
     * @var array
     */
    private $segments;

    public function setKeywords(array $keywords)
    {
        $this->keywords = $keywords;
    }

    public function setSegments(array $segments)
    {
        $this->segments = $segments;
    }

    /**
     *
     * @var integer
     */
    public $isDeleted;

    public function onConstruct()
    {
        self::$instance = $this;
    }

    /**
     * Initialize method for model.
     * @throws \Exception
     */
    public function initialize()
    {
        $this->setSchema("shop_products");
        $this->setSource("product");
        $this->defaultBehavior();

        $this->useDynamicUpdate(true);

        $this->hasMany('productId', 'Shop_products\Models\ProductImages', 'productId', ['alias' => 'ProductImages']);
        $this->hasMany('productId', 'Shop_products\Models\ProductQuestions', 'questionProductId', ['alias' => 'ProductQuestions']);
        $this->hasMany('productId', 'Shop_products\Models\ProductRate', 'rateProductId', ['alias' => 'ProductRate']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'product';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Product[]|Product|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Product|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    public static function query(\Phalcon\DiInterface $dependencyInjector = null)
    {
        $query = parent::query($dependencyInjector);
        $query->where('isDeleted = false');
        return $query;
    }

    public static function getWhiteList()
    {
        return self::WHITE_LIST;
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'product_id' => 'productId',
            'product_category_id' => 'productCategoryId',
            'product_user_id' => 'productUserId',
            'product_vendor_id' => 'productVendorId',
            'product_title' => 'productTitle',
            'product_link_slug' => 'productLinkSlug',
            'product_type' => 'productType',
            'product_custom_page_id' => 'productCustomPageId',
            'product_price' => 'productPrice',
            'product_sale_price' => 'productSalePrice',
            'product_sale_end_time' => 'productSaleEndTime',
            'product_brand_id' => 'productBrandId',
            'product_weight' => 'productWeight',
            'product_digital_size' => 'productDigitalSize',
            'created_at' => 'createdAt',
            'updated_at' => 'updatedAt',
            'deleted_at' => 'deletedAt',
            'is_published' => 'isPublished',
            'is_deleted' => 'isDeleted'
        ];
    }

    public function toApiArray()
    {
        return [
            'productId' => $this->productId,
            'productCategoryId' => $this->productCategoryId,
            'productVendorId' => $this->productVendorId,
            'productTitle' => $this->productTitle,
            'productLink' => $this->productLinkSlug,
            'productCustomPageId' => $this->productCustomPageId,
            'productPrice' => $this->productPrice,
            'productSalePrice' => $this->productSalePrice,
            'productSaleEndTime' => $this->productSaleEndTime,
            'productKeywords' => $this->keywords ?? null,
            'productSegments' => $this->segments ?? null
        ];
    }

    /**
     * @return \Phalcon\Config
     */
    private function getTitleValidationConfig()
    {
        return $this->getDI()->getConfig()->application->validation->productTitle;
    }

    /**
     * @return bool
     */
    public function validation()
    {
        $validation = new Validation();

        $validation->add(
            ['productCategoryId', 'productVendorId', 'productUserId'],
            new UuidValidator()
        );

        $validation->add(
            ['productCustomPageId'],
            new UuidValidator([
                'allowEmpty' => true
            ])
        );

        $validation->add(
            'productTitle',
            new Validation\Validator\AlphaNumericValidator([
                'whiteSpace' => $this->getTitleValidationConfig()->whiteSpace,
                'underscore' => $this->getTitleValidationConfig()->underscore,
                'min' => $this->getTitleValidationConfig()->min,
                'max' => $this->getTitleValidationConfig()->max,
                'message' => 'Product title should contain only letters'
            ])
        );

        if ($this->_operationMade == self::OP_CREATE) {
            $validation->add(
                'productType',
                new Validation\Validator\InclusionIn([
                    'domain' => ProductTypesEnums::getValues(),
                    'allowEmpty' => true,
                    'message' => 'Product type should be physical or downloadable'
                ])
            );
        }

        $validation->add(
            ['productPrice', 'productSalePrice'],
            new Validation\Validator\NumericValidator([
                'allowFloat' => true,
                'min' => 0,
                'allowEmpty' => false
            ])
        );

        $validation->add(
            'productSaleEndTime',
            new Validation\Validator\Date([
                'format' => 'Y-m-d H:i:s',
                'allowEmpty' => true
            ])
        );

        $message = $validation->validate([
            'productCategoryId' => $this->productCategoryId,
            'productVendorId' => $this->productVendorId,
            'productUserId' => $this->productUserId,
            'productCustomPageId' => $this->productCustomPageId,
            'productTitle' => $this->productTitle,
            'productPrice' => $this->productPrice,
            'productSalePrice' => $this->productSalePrice,
            'productSaleEndTime' => $this->productSaleEndTime
        ]);

        $this->_errorMessages = $message;

        return !$message->count();
    }
}
