<?php

namespace app\common\models;

use app\common\models\embedded\Variation;
use Exception;
use Phalcon\Mvc\Model\ResultInterface;
use Phalcon\Mvc\Model\Resultset;
use Phalcon\Mvc\Model\ResultSetInterface;

/**
 * ProductImages
 * 
 * @package app\common\models
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-01-11, 16:39:33
 * @property ProductImagesSizes $imagesSizes
 */
class ProductImages extends BaseModel
{
    /**
     *
     * @var string
     * @Primary
     * @Column(column='image_id', type='string', length=36)
     */
    public $imageId;

    /**
     * @var string
     * @Column(column='image_album_id', type='string', length=7)
     */
    public $imageAlbumId;

    /**
     *
     * @var string
     * @Column(column='product_id', type='string', length=36)
     */
    public $productId;

    /**
     *
     * @var string
     * @Column(column='image_link', type='text')
     */
    public $imageLink;

    /**
     * @var int
     * @Column(column='image_size', type='integer', length=11)
     */
    public $imageSize;

    /**
     * @var string
     * @Column(column='image_type', type='varchar', length=15, nullable=true)
     */
    public $imageType;

    /**
     * @var int
     * @Column(column='image_width', type='integer', length=4, nullable=true)
     */
    public $imageWidth;

    /**
     * @var int
     * @Column(column='image_height', type='integer', length=4, nullable=true)
     */
    public $imageHeight;

    /**
     * @var string
     * @Column(column='image_delete_hash', type='varchar', length=20)
     */
    public $imageDeleteHash;

    /**
     * @var string
     * @Column(column='image_name', type='varchar', length=100, nullable=true)
     */
    public $imageName;

    /**
     * @var int
     * @Column(column='image_order', type='tinyint', default=0, nullable=false)
     */
    public $imageOrder = 0;

    /**
     * @var string
     * @Column(column='created_at', type='datetime')
     */
    public $createdAt;

    /**
     *
     * @var string
     * @Column(column='deleted_at', type='datetime', nullable=true)
     */
    public $deletedAt;

    /**
     * @var bool
     * @Column(column='is_main', type='boolean', default=false, nullable=false)
     */
    public $isMain = false;

    /**
     * @var bool
     * @Column(column='is_variation_image', type='boolean', default=false)
     */
    public $isVariationImage = false;

    /**
     *
     * @var integer
     * @Column(column='is_deleted', type='boolean', default=0)
     */
    public $isDeleted;

    /**
     * Initialize method for model.
     * @throws Exception
     */
    public function initialize()
    {
        $this->defaultBehavior();
        $this->setSchema('shop_products');
        $this->setSource('product_images');

        $this->belongsTo(
            'productId',
            Product::class,
            'productId',
            [
                'reusable' => true
            ]
        );

        $this->belongsTo(
            'imageId',
            Variation::class,
            'imageId',
            [
                'reusable' => true
            ]
        );

        $this->hasOne(
            'imageId',
            ProductImagesSizes::class,
            'imageId',
            [
                'alias' => 'imagesSizes'
            ]
        );
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'product_images';
    }

    public function afterDelete()
    {
        $imageSizes = ProductImagesSizes::model();
        $imageVersions = $imageSizes::findFirst([
            'conditions' => 'imageId = :imageId:',
            'bind' => [
                'imageId' => $this->imageId
            ]
        ]);
        if ($imageVersions) {
            $imageVersions->delete();
        }
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return ProductImages[]|ResultSetInterface
     */
    public static function find($parameters = null)
    {
        $operator = '';
        if (!array_key_exists('conditions', $parameters)) {
            $parameters['conditions'] = '';
        }
        if (!empty($parameters['conditions'])) {
            $operator = ' AND ';
        }
        $parameters['conditions'] .= $operator.'isDeleted = false';
        $parameters['hydration'] = Resultset::HYDRATE_RECORDS;
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return ProductImages|ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        $query = self::find($parameters);
        return $query->getFirst();
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'image_id' => 'imageId',
            'image_album_id' => 'imageAlbumId',
            'product_id' => 'productId',
            'image_link' => 'imageLink',
            'image_size' => 'imageSize',
            'image_type' => 'imageType',
            'image_width' => 'imageWidth',
            'image_height' => 'imageHeight',
            'image_delete_hash' => 'imageDeleteHash',
            'image_name' => 'imageName',
            'image_order' => 'imageOrder',
            'created_at' => 'createdAt',
            'deleted_at' => 'deletedAt',
            'is_main' => 'isMain',
            'is_variation_image' => 'isVariationImage',
            'is_deleted' => 'isDeleted'
        ];
    }

    /**
     * @return array
     */
    public function toApiArray(): array
    {
        return [
            'imageId' => $this->imageId,
            'imageAlbumId' => $this->imageAlbumId,
            'imageLink' => $this->imageLink,
            'imageWidth' => (float) $this->imageWidth,
            'imageHeight' => (float) $this->imageHeight,
            'imageType' => $this->imageType,
            'imageDeleteHash' => $this->imageDeleteHash,
            'imageOrder' => (int) $this->imageOrder,
            'imagesSizes' => ($this->imagesSizes) ? $this->imagesSizes->toApiArray() : [],
            'isMain' => (bool) $this->isMain
        ];
    }

    /**
     * @return array
     */
    public function toVariationImageArray(): array
    {
        return [
            'imageId' => $this->imageId,
            'imageAlbumId' => $this->imageAlbumId,
            'imageLink' => $this->imageLink,
            'imageWidth' => (float) $this->imageWidth,
            'imageHeight' => (float) $this->imageHeight,
            'imageType' => $this->imageType,
            'imagesSizes' => ($this->imagesSizes) ? $this->imagesSizes->toApiArray() : [],
        ];
    }

}
